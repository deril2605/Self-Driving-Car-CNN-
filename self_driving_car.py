# -*- coding: utf-8 -*-
"""self_driving_car.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TuOY6XtYvETH8fBztpdPKHKsVmyp3h0k
"""

# !git clone https://github.com/rslim087a/track

# !ls track

# !pip install imgaug

import numpy as np
import os
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from sklearn.utils import shuffle
from imgaug import augmenters as iaa
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.optimizers import Adam
from keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense
import ntpath
import cv2
import random

datadir = 'track'
columns=['center','left','right','steering','throttle','reverse','speed']
data = pd.read_csv(os.path.join(datadir,'driving_log.csv'), names=columns) 
pd.set_option('display.max_columns', None)  
pd.set_option('display.expand_frame_repr', False)
pd.set_option('max_colwidth', -1)
print(data.head())

def path_leaf(path):
  head,tail=ntpath.split(path)
  return tail
data['center']=data['center'].apply(path_leaf)
data['left']=data['left'].apply(path_leaf)
data['right']=data['right'].apply(path_leaf)
print(data.head())

num_bins = 25
samples_per_bin = 400
hist, bins = np.histogram(data['steering'], num_bins)
center = (bins[:-1]+ bins[1:]) * 0.5
plt.bar(center, hist, width=0.05)
plt.plot((np.min(data['steering']), np.max(data['steering'])), (samples_per_bin, samples_per_bin))

print('total data:', len(data))
remove_list = []
for j in range(num_bins):
  list_ = []
  for i in range(len(data['steering'])):
    if data['steering'][i] >= bins[j] and data['steering'][i] <= bins[j+1]:
      list_.append(i)
  list_ = shuffle(list_)
  list_ = list_[samples_per_bin:]
  remove_list.extend(list_)
 
print('removed:', len(remove_list))
data.drop(data.index[remove_list], inplace=True)
print('remaining:', len(data))
 
hist, _ = np.histogram(data['steering'], (num_bins))
plt.bar(center, hist, width=0.05)
plt.plot((np.min(data['steering']), np.max(data['steering'])), (samples_per_bin, samples_per_bin))

def load_img_steering(datadir, data):
  image_path=[]
  steering=[]
  for i in range(len(data)):
    indexed_data = data.iloc[i]
    center, left, right = indexed_data[0], indexed_data[1], indexed_data[2]
    image_path.append(os.path.join(datadir, center.strip()))
    steering.append(float(indexed_data[3]))
  image_path=np.asarray(image_path)
  steering=np.asarray(steering)
  return image_path, steering

image_paths, steering = load_img_steering(datadir + '/IMG', data)

X_train, X_test, y_train, y_test = train_test_split(image_paths, steering, test_size=0.2,  random_state=6)

def zoom(img):
  zoom = iaa.Affine(scale=(1,1.3))
  img = zoom.augment_image(img)
  return img

def pan(img):
  pan = iaa.Affine(translate_percent={'x':(-0.1,0.1), 'y':(-0.1,0.1)})
  img = pan.augment_image(img)
  return img

def brightness(img):
  brightness = iaa.Multiply((0.2,1.2))
  img = brightness.augment_image(img)
  return img

def flip(img, steering_angle):
  img = cv2.flip(img, 1)
  steering_angle = -steering_angle
  return img, steering_angle

def augment(img, steering_angle):
  img = mpimg.imread(img)
  if np.random.rand() < 0.5:
    img = pan(img)
  if np.random.rand() < 0.5:
    img = zoom(img)
  if np.random.rand() < 0.5:
    img = brightness(img)
  if np.random.rand() < 0.5:
    img, steering_angle = flip(img, steering_angle)
  return img, steering_angle

def img_preprocess(img):
  img = img[60:135,:,:] # remove scenery and hood of the car
  img = cv2.cvtColor(img, cv2.COLOR_RGB2YUV) # nvidia suggested color space, very effective to use with nvdia archi
  img = cv2.GaussianBlur(img, (3,3), 0)
  img = cv2.resize(img, (200, 66))
  img = img/255
  return img

def batch_generator(image_paths, steering_ang, batch_size, isTraining):
  while True:
    batch_img=[]
    batch_steering=[]

    for i in range(batch_size):
      random_index=random.randint(0, len(image_paths)-1)
      if isTraining:
        im, steering = augment(image_paths[random_index], steering_ang[random_index])
      else:
        im = mpimg.imread(image_paths[random_index])
        steering = steering_ang[random_index]
      im = img_preprocess(im)
      batch_img.append(im)
      batch_steering.append(steering)
    yield (np.asarray(batch_img), np.asarray(batch_steering))

X_train_gen, y_train_gen = next(batch_generator(X_train, y_train,1 , 1))
X_valid_gen, y_valid_gen = next(batch_generator(X_test, y_test,1 , 0))

fig, axs = plt.subplots(1, 2, figsize=(15, 10))
fig.tight_layout()
 
axs[0].imshow(X_train_gen[0])
axs[0].set_title('Training Image')
 
axs[1].imshow(X_valid_gen[0])
axs[1].set_title('Validation Image')

# X_train = np.array(list(map(img_preprocess, X_train)))
# X_valid = np.array(list(map(img_preprocess, X_test)))

image = image_paths[random.randint(0, 1000)]
original_image = mpimg.imread(image)
brightness_altered_image = brightness(original_image)
fig, axs = plt.subplots(1, 2, figsize=(15, 10))
fig.tight_layout()
axs[0].imshow(original_image)
axs[0].set_title('Original Image')
axs[1].imshow(brightness_altered_image)
axs[1].set_title('Brightness altered image ')

def nvdia_model():
  model = Sequential()
 
  model.add(Conv2D(24, kernel_size=(5,5), strides=(2,2), input_shape=(66,200,3),activation='elu'))
  
  model.add(Conv2D(36, kernel_size=(5,5), strides=(2,2), activation='elu'))
  model.add(Conv2D(48, kernel_size=(5,5), strides=(2,2), activation='elu'))
  model.add(Conv2D(64, kernel_size=(3,3), activation='elu'))
  model.add(Conv2D(64, kernel_size=(3,3), activation='elu'))
  # model.add(Dropout(0.5))
  
  model.add(Flatten())
  model.add(Dense(100, activation='elu'))
  # model.add(Dropout(0.5))
  
  model.add(Dense(50, activation='elu'))
  model.add(Dense(10, activation ='elu'))
  model.add(Dense(1))
  
  optimizer= Adam(lr=1e-4)
  model.compile(loss='mse', optimizer=optimizer)
  
  return model

model = nvdia_model()
print(model.summary())

# history = model.fit(X_train, y_train, epochs=30, validation_data=(X_valid, y_test), batch_size=100, verbose=1, shuffle=1)
history = model.fit_generator(batch_generator(X_train, y_train, 100, 1), steps_per_epoch=300, epochs=10, validation_data=batch_generator(X_test, y_test, 100,0), validation_steps=200, verbose=1, shuffle=1)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.legend(['training', 'validation'])
plt.title('Loss')
plt.xlabel('Epoch')

model.save('model.h5')
from google.colab import files
files.download('model.h5')